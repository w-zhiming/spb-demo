<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文档如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文档是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="10 seconds">


    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml"/>

    <!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义后，可以使“${}”来使用变量。 -->
    <property name="APP_NAME" value="spb-demo"/>
    <property name="APP_PACKAGE" value="com.demo.spb"/>
    <property name="LOG_FILE_PATH" value="./logs}"/>
    <contextName>${APP_NAME}</contextName>

    <!--1. 输出到控制台-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 默认情况下，每个日志事件都会立即刷新到基础输出流。 这种默认方法更安全，因为如果应用程序在没有正确关闭appender的情况下退出，则日志事件不会丢失。
         但是，为了显着增加日志记录吞吐量，您可能希望将immediateFlush属性设置为false -->
        <!--<immediateFlush>true</immediateFlush>-->

        <!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>debug</level>
        </filter>
        <encoder>
            <!-- %37():如果字符没有37个字符长度,则左侧用空格补齐 -->
            <!-- %-37():如果字符没有37个字符长度,则右侧用空格补齐 -->
            <!-- %15.15():如果记录的线程字符长度小于15(第一个)则用空格在左侧补齐,如果字符长度大于15(第二个),则从开头开始截断多余的字符 -->
            <!-- %-40.40():如果记录的logger字符长度小于40(第一个)则用空格在右侧补齐,如果字符长度大于40(第二个),则从开头开始截断多余的字符 -->
            <!-- %msg：日志打印详情 -->
            <!-- %n:换行符 -->
            <!-- %highlight():转换说明符以粗体红色显示其级别为ERROR的事件，红色为WARN，BLUE为INFO，以及其他级别的默认颜色。 -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) [%20.20(%thread)] %cyan(%-40.40(%logger{40})) : %msg%n
            </pattern>
            <!-- 控制台也要使用UTF-8，不要使用GBK，否则会中文乱码 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- info 日志-->
    <!-- RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <!-- 以下的大概意思是：1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是project_info.log -->
    <!--             2.如果日期没有发生变化，但是当前日志的文件大小超过10MB时，对当前日志进行分割 重命名-->
<!--    <appender name="info_log" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        &lt;!&ndash;是否追加到文件末尾,默认为true&ndash;&gt;-->
<!--        <append>true</append>-->
<!--        <filter class="ch.qos.logback.classic.filter.LevelFilter">-->
<!--            <level>ERROR</level>-->
<!--            <onMatch>DENY</onMatch>&lt;!&ndash; 如果命中ERROR就禁止这条日志 &ndash;&gt;-->
<!--            <onMismatch>ACCEPT</onMismatch>&lt;!&ndash; 如果没有命中就使用这条规则 &ndash;&gt;-->
<!--        </filter>-->
<!--        &lt;!&ndash;有两个与RollingFileAppender交互的重要子组件。 第一个RollingFileAppender子组件，即RollingPolicy:负责执行翻转所需的操作。-->
<!--         RollingFileAppender的第二个子组件，即TriggeringPolicy:将确定是否以及何时发生翻转。 因此，RollingPolicy负责什么和TriggeringPolicy负责什么时候.-->
<!--        作为任何用途，RollingFileAppender必须同时设置RollingPolicy和TriggeringPolicy,但是，如果其RollingPolicy也实现了TriggeringPolicy接口，则只需要显式指定前者。&ndash;&gt;-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">-->
<!--            &lt;!&ndash; 日志文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 &ndash;&gt;-->
<!--            &lt;!&ndash; 文件名：logs/project_info.2017-12-05.0.log &ndash;&gt;-->
<!--            &lt;!&ndash; 注意：SizeAndTimeBasedRollingPolicy中 ％i和％d令牌都是强制性的，必须存在，要不会报错 &ndash;&gt;-->
<!--            <fileNamePattern>${LOG_FILE_PATH}/${APP_NAME}_inf.%d.%i.log</fileNamePattern>-->
<!--            &lt;!&ndash; 每产生一个日志文件，该日志文件的保存期限为30天, ps:maxHistory的单位是根据fileNamePattern中的翻转策略自动推算出来的,例如上面选用了yyyy-MM-dd,则单位为天-->
<!--            如果上面选用了yyyy-MM,则单位为月,另外上面的单位默认为yyyy-MM-dd&ndash;&gt;-->
<!--            <maxHistory>30</maxHistory>-->
<!--            &lt;!&ndash; 每个日志文件到10mb的时候开始切分，最多保留30天，但最大到20GB，哪怕没到30天也要删除多余的日志 &ndash;&gt;-->
<!--            <totalSizeCap>8GB</totalSizeCap>-->
<!--            &lt;!&ndash; maxFileSize:这是活动文件的大小，默认值是10MB，测试时可改成5KB看效果 &ndash;&gt;-->
<!--            <maxFileSize>32MB</maxFileSize>-->
<!--        </rollingPolicy>-->
<!--        &lt;!&ndash;编码器&ndash;&gt;-->
<!--        <encoder>-->
<!--            &lt;!&ndash; pattern节点，用来设置日志的输入格式 ps:日志文件中没有设置颜色,否则颜色部分会有ESC[0:39em等乱码&ndash;&gt;-->
<!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%20.20(%thread)] %-40.40(%logger{40}) : %msg%n</pattern>-->
<!--            <charset>UTF-8</charset>-->
<!--        </encoder>-->
<!--    </appender>-->

<!--    <appender name="error_log" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        &lt;!&ndash;日志文件路径和名称&ndash;&gt;-->
<!--        &lt;!&ndash;        <File>logs/project_error.log</File>&ndash;&gt;-->
<!--        &lt;!&ndash;是否追加到文件末尾,默认为true&ndash;&gt;-->
<!--        <append>true</append>-->
<!--        &lt;!&ndash; ThresholdFilter过滤低于指定阈值的事件。 对于等于或高于阈值的事件，ThresholdFilter将在调用其decision（）方法时响应NEUTRAL。 但是，将拒绝级别低于阈值的事件 &ndash;&gt;-->
<!--        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
<!--            <level>ERROR</level>&lt;!&ndash; 低于ERROR级别的日志（debug,info）将被拒绝，等于或者高于ERROR的级别将相应NEUTRAL &ndash;&gt;-->
<!--        </filter>-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">-->
<!--            <fileNamePattern>${LOG_FILE_PATH}/${APP_NAME}_err.%d.%i.log</fileNamePattern>-->
<!--            <maxHistory>30</maxHistory>-->
<!--            <totalSizeCap>10GB</totalSizeCap>-->
<!--            <maxFileSize>10MB</maxFileSize>-->
<!--        </rollingPolicy>-->
<!--        <encoder>-->
<!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%20.20(%thread)] %-40.40(%logger{40}) : %msg%n</pattern>-->
<!--            <charset>UTF-8</charset>-->
<!--        </encoder>-->
<!--    </appender>-->

    <appender name="all_log" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志文件路径和名称-->
        <!--        <File>logs/project_error.log</File>-->
        <!--是否追加到文件末尾,默认为true-->
        <append>true</append>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE_PATH}/${APP_NAME}_all.%d.%i.log</fileNamePattern>
            <maxHistory>30</maxHistory>
            <totalSizeCap>8GB</totalSizeCap>
            <maxFileSize>32MB</maxFileSize>
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>


    <!--
       <logger>用来设置某一个包或者具体的某一个类的日志打印级别、
       以及指定<appender>。<logger>仅有一个name属性，
       一个可选的level和一个可选的addtivity属性。
       name:用来指定受此logger约束的某一个包或者具体的某一个类。
       level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
             还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。
             如果未设置此属性，那么当前logger将会继承上级的级别。
       addtivity:是否向上级logger传递打印信息。默认是true。
       <logger name="org.springframework.web" level="info"/>
       <logger name="org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor" level="INFO"/>
   -->

    <!--
        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：
        第一种把<root level="info">改成<root level="DEBUG">这样就会打印sql，不过这样日志那边会出现很多其他消息
        第二种就是单独给dao下目录配置debug模式，代码如下，这样配置sql语句会打印，其他还是正常info级别：
        【logging.level.org.mybatis=debug logging.level.dao=debug】
     -->

    <!--
       root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性
       level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
       不能设置为INHERITED或者同义词NULL。默认是DEBUG
       可以包含零个或多个元素，标识这个appender将会添加到这个logger。
   -->

    <springProfile name="default, dev,local">
        <root level="info">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="all_log"/>
            <!--        <appender-ref ref="info_log"/>-->
            <!--        <appender-ref ref="error_log"/>-->
        </root>
        <logger name="org.springframework.web.servlet.mvc.method.annotation" level ="debug" />
        <logger name="${APP_PACKAGE}" level="debug">
        </logger>
    </springProfile>

    <springProfile name="prod">
        <root level="info">
            <appender-ref ref="all_log"/>
            <!--        <appender-ref ref="info_log"/>-->
            <!--        <appender-ref ref="error_log"/>-->
        </root>
        <logger name="org.springframework.web.servlet" level = "debug"/>
        <logger name="${APP_PACKAGE}" level="info"/>

        <!--    输出到logstash的appender-->
        <!--    <appender name="LOGSTASH" class="net.logstash.logback.appender.LogstashTcpSocketAppender">-->
        <!--        <destination>127.0.0.1:8089</destination>-->
        <!--        <encoder charset="UTF-8" class="net.logstash.logback.encoder.LogstashEncoder"/>-->
        <!--    </appender>-->

        <!--    <logger name="com.redhlink.strokesrv.aspect.WebLogAspect" level="INFO" additivity="true">-->
        <!--        <appender-ref ref="LOGSTASH"/>-->
        <!--    </logger>-->
    </springProfile>




</configuration>
